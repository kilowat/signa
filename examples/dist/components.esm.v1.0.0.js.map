{
  "version": 3,
  "sources": ["../../src/components/button/button.ts", "../../src/components/button/button.module.scss"],
  "sourcesContent": ["\r\nimport { defineStore, defineComponent, html, State, createState } from \"signa/core\";\r\nimport styles from './button.module.scss';\r\n\r\nconst counterStore = defineStore({\r\n    key: 'counter',\r\n    state: { count: 0 },\r\n    computed: () => ({\r\n        double: () => true,\r\n    })\r\n})\r\n\r\n// example def types\r\ndeclare module \"signa/core\" {\r\n    interface GlobalStore {\r\n        counter: typeof counterStore\r\n    }\r\n}\r\n\r\ndefineComponent({\r\n    tagName: 'my-counter',\r\n    state: { count: 0 },\r\n    props: {\r\n        val: {\r\n            type: Number,\r\n            default: 20,\r\n        }\r\n    },\r\n    listen(params) {\r\n\r\n    },\r\n    connected(ctx) {\r\n\r\n    },\r\n    disconnected(ctx) {\r\n\r\n    },\r\n    getters: (context) => ({\r\n        counterStore: () => {\r\n            return context.store.$('counter')\r\n        },\r\n        hi: () => 'hi',\r\n    }),\r\n    computed: ({ state, props }) => {\r\n        console.log(props)\r\n        return ({\r\n            doubleCount: () => state.value.count + props.val,\r\n            isEven: () => state.value.count % 2 === 0,\r\n        });\r\n    },\r\n    actions: ({ state }) => ({\r\n        increment: (amount: number) => {\r\n            state.emit({ count: state.value.count + amount });\r\n        },\r\n        reset: () => {\r\n            state.emit({ count: 0 });\r\n        }\r\n    }),\r\n\r\n    render: (context) => {\r\n        const { state, computed, actions, getters: { counterStore } } = context;\r\n\r\n        return html`<div> <p>Count test: ${state.value.count}</p> <p>Double: ${computed.doubleCount}</p> <p>Is Even: ${computed.isEven}</p> <button onclick=${() => actions.increment(1)}>+1</button> <button onclick=${actions.reset}>Reset</button> </div>`;\r\n    },\r\n});\r\n\r\ndefineComponent({\r\n    tagName: 'my-counter-2',\r\n    state: { count: 0 },\r\n    props: {\r\n        count: {\r\n            type: Number,\r\n            default: 0\r\n        }\r\n    },\r\n    getters: (context) => ({\r\n        hi: () => 'hi',\r\n        counterStore: () => context.store.$('counter'),\r\n    }),\r\n    computed: ({ state }) => ({\r\n        doubleCount: () => state.value.count * 2,\r\n        isEven: () => state.value.count % 2 === 0,\r\n    }),\r\n    actions: ({ state }) => ({\r\n        increment: (amount: number) => {\r\n            state.emit({ count: state.value.count + amount });\r\n        },\r\n        reset: () => {\r\n            state.emit({ count: 0 });\r\n        }\r\n    }),\r\n    listen(params) {\r\n\r\n    },\r\n    render: ({ props, state, computed, actions, getters: { counterStore, hi } }) => {\r\n        return html`<div> counter 2 component props value ${props.count} <p>Count: ${state.value.count}</p> <p>Double: ${computed.doubleCount}</p> <p>Is Even: ${computed.isEven}</p> <button onclick=${() => actions.increment(1)}>+1</button> <button onclick=${actions.reset}>Reset</button> <my-component data-count=\"${state.value.count}\"></my-component> </div>`;\r\n    },\r\n});\r\n\r\ndefineComponent({\r\n    tagName: 'my-component',\r\n    state: { count: 0 },\r\n    props: {\r\n        count: {\r\n            type: Number,\r\n            default: 0\r\n        }\r\n    },\r\n    getters: (context) => ({\r\n        hi: () => 'hi',\r\n        counterStore: () => context.store.$('counter'),\r\n    }),\r\n    computed: ({ state }) => ({\r\n        doubleCount: () => state.value.count * 2,\r\n        isEven: () => state.value.count % 2 === 0,\r\n    }),\r\n    actions: ({ state }) => ({\r\n        increment: (amount: number) => {\r\n            state.emit({ count: state.value.count + amount });\r\n        },\r\n        reset: () => {\r\n            state.emit({ count: 0 });\r\n        }\r\n    }),\r\n    listen(params) {\r\n\r\n    },\r\n    render: ({ props, state, computed, actions, getters: { counterStore } }) => {\r\n        return html`<div> <div>props: ${props.count}</div> <p >Count: ${state.value.count}</p> <button onclick=${() => actions.increment(1)}>+1</button> <button onclick=${actions.reset}>Reset</button> </div>`;\r\n    },\r\n});\r\n\r\nconst counterStateValue = { count: 0 };\r\nconst useActions = (state: State<typeof counterStateValue>) => ({\r\n    inc: () => state.emit({ count: state.value.count + 1 })\r\n})\r\n\r\n\r\n// owner + external composition state actions ...\r\ndefineComponent({\r\n    tagName: 'parent-example-cmp-2',\r\n    state: { example: 0, ...counterStateValue }, // owner local state + external\r\n    actions: ({ state }) => ({\r\n        ...useActions(state),\r\n        myinc: () => { state.emit({ example: state.value.example + 1 }) }\r\n    }),\r\n    render(context) {\r\n        return html`${context.state.value.example}<example-cmp @button-click=\"${() => console.log('button-click event')}\"></example-cmp>`\r\n    },\r\n})\r\n\r\ndefineComponent({\r\n    tagName: 'example-cmp',\r\n    render(context) {\r\n        return html`<button @click=\"${() => context.el.emitEvent('button-click')}\">Click</button>`\r\n    },\r\n})\r\n\r\n\r\nconst exState = createState(0);\r\nconst inc = exState.value + 1;\r\n\r\n\r\ndefineComponent({\r\n    tagName: 'example-cmp-2',\r\n    render(context) {\r\n        return html`<button @click=\"${() => context.el.emitEvent('button-click')}\">Click</button>`\r\n    },\r\n})\r\n\r\nexport interface ButtonProps {\r\n    variant: 'primary' | 'secondary' | 'outline';\r\n}\r\n\r\nexport const Button = defineComponent({\r\n    tagName: 'signa-button',\r\n    props: {\r\n        variant: { type: String, default: 'primary' }\r\n    } as const,\r\n    render: ({ slots }) => {\r\n        console.log(slots.default)\r\n        return html`<button class=\"${styles.button}\"> ${slots.default} </button>`;\r\n    }\r\n});\r\n", "import 'css-chunk:src/components/button/button.module.scss';export default {\n  \"button\": \"signa_button_d5bc2\"\n};"],
  "mappings": "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",
  "names": ["counterStore"]
}
