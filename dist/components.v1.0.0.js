"use strict";var SignaCmp=(()=>{var r=Object.defineProperty;var a=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var i=Object.prototype.hasOwnProperty;var m=(e=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(e,{get:(t,o)=>(typeof require!="undefined"?require:t)[o]}):e)(function(e){if(typeof require!="undefined")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')});var p=(e,t)=>{for(var o in t)r(e,o,{get:t[o],enumerable:!0})},s=(e,t,o,u)=>{if(t&&typeof t=="object"||typeof t=="function")for(let c of l(t))!i.call(e,c)&&c!==o&&r(e,c,{get:()=>t[c],enumerable:!(u=a(t,c))||u.enumerable});return e};var d=e=>s(r({},"__esModule",{value:!0}),e);var S={};p(S,{Button:()=>g});var n=m("signa/core"),f=(0,n.defineStore)({key:"counter",state:{count:0},computed:()=>({double:()=>!0})});(0,n.defineComponent)({tagName:"my-counter",state:{count:0},props:{val:{type:Number,default:20}},listen(e){},connected(e){},disconnected(e){},getters:e=>({counterStore:()=>e.store.$("counter"),hi:()=>"hi"}),computed:({state:e,props:t})=>(console.log(t),{doubleCount:()=>e.value.count+t.val,isEven:()=>e.value.count%2===0}),actions:({state:e})=>({increment:t=>{e.emit({count:e.value.count+t})},reset:()=>{e.emit({count:0})}}),render:e=>{let{state:t,computed:o,actions:u,getters:{counterStore:c}}=e;return n.html`<div> <p>Count test: ${t.value.count}</p> <p>Double: ${o.doubleCount}</p> <p>Is Even: ${o.isEven}</p> <button onclick=${()=>u.increment(1)}>+1</button> <button onclick=${u.reset}>Reset</button> </div>`}});(0,n.defineComponent)({tagName:"my-counter-2",state:{count:0},props:{count:{type:Number,default:0}},getters:e=>({hi:()=>"hi",counterStore:()=>e.store.$("counter")}),computed:({state:e})=>({doubleCount:()=>e.value.count*2,isEven:()=>e.value.count%2===0}),actions:({state:e})=>({increment:t=>{e.emit({count:e.value.count+t})},reset:()=>{e.emit({count:0})}}),listen(e){},render:({props:e,state:t,computed:o,actions:u,getters:{counterStore:c,hi:y}})=>n.html`<div> counter 2 component props value ${e.count} <p>Count: ${t.value.count}</p> <p>Double: ${o.doubleCount}</p> <p>Is Even: ${o.isEven}</p> <button onclick=${()=>u.increment(1)}>+1</button> <button onclick=${u.reset}>Reset</button> <my-component data-count="${t.value.count}"></my-component> </div>`});(0,n.defineComponent)({tagName:"my-component",state:{count:0},props:{count:{type:Number,default:0}},getters:e=>({hi:()=>"hi",counterStore:()=>e.store.$("counter")}),computed:({state:e})=>({doubleCount:()=>e.value.count*2,isEven:()=>e.value.count%2===0}),actions:({state:e})=>({increment:t=>{e.emit({count:e.value.count+t})},reset:()=>{e.emit({count:0})}}),listen(e){},render:({props:e,state:t,computed:o,actions:u,getters:{counterStore:c}})=>n.html`<div> <div>props: ${e.count}</div> <p >Count: ${t.value.count}</p> <button onclick=${()=>u.increment(1)}>+1</button> <button onclick=${u.reset}>Reset</button> </div>`});var v={count:0},b=e=>({inc:()=>e.emit({count:e.value.count+1})});(0,n.defineComponent)({tagName:"parent-example-cmp-2",state:{example:0,...v},actions:({state:e})=>({...b(e),myinc:()=>{e.emit({example:e.value.example+1})}}),render(e){return n.html`${e.state.value.example}<example-cmp @button-click="${()=>console.log("button-click event")}"></example-cmp>`}});(0,n.defineComponent)({tagName:"example-cmp",render(e){return n.html`<button @click="${()=>e.el.emitEvent("button-click")}">Click</button>`}});var $=(0,n.createState)(0),C=$.value+1;(0,n.defineComponent)({tagName:"example-cmp-2",render(e){return n.html`<button @click="${()=>e.el.emitEvent("button-click")}">Click</button>`}});var g=(0,n.defineComponent)({tagName:"signa-button",props:{variant:{type:String,default:"primary"}},render:({slots:e})=>(console.log(e.default),n.html`<button class="signa-button"> ${e.default} </button>`)});return d(S);})();
