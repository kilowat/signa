import{defineStore as i,defineComponent as o,html as u,createState as l}from"signa/core";var a={button:"signa_button_d5bc2"};var y=i({key:"counter",state:{count:0},computed:()=>({double:()=>!0})});o({tagName:"my-counter",state:{count:0},props:{val:{type:Number,default:20}},listen(t){},connected(t){},disconnected(t){},getters:t=>({counterStore:()=>t.store.$("counter"),hi:()=>"hi"}),computed:({state:t,props:e})=>(console.log(e),{doubleCount:()=>t.value.count+e.val,isEven:()=>t.value.count%2===0}),actions:({state:t})=>({increment:e=>{t.emit({count:t.value.count+e})},reset:()=>{t.emit({count:0})}}),render:t=>{let{state:e,computed:c,actions:n,getters:{counterStore:r}}=t;return u`<div> <p>Count test: ${e.value.count}</p> <p>Double: ${c.doubleCount}</p> <p>Is Even: ${c.isEven}</p> <button onclick=${()=>n.increment(1)}>+1</button> <button onclick=${n.reset}>Reset</button> </div>`}});o({tagName:"my-counter-2",state:{count:0},props:{count:{type:Number,default:0}},getters:t=>({hi:()=>"hi",counterStore:()=>t.store.$("counter")}),computed:({state:t})=>({doubleCount:()=>t.value.count*2,isEven:()=>t.value.count%2===0}),actions:({state:t})=>({increment:e=>{t.emit({count:t.value.count+e})},reset:()=>{t.emit({count:0})}}),listen(t){},render:({props:t,state:e,computed:c,actions:n,getters:{counterStore:r,hi:b}})=>u`<div> counter 2 component props value ${t.count} <p>Count: ${e.value.count}</p> <p>Double: ${c.doubleCount}</p> <p>Is Even: ${c.isEven}</p> <button onclick=${()=>n.increment(1)}>+1</button> <button onclick=${n.reset}>Reset</button> <my-component data-count="${e.value.count}"></my-component> </div>`});o({tagName:"my-component",state:{count:0},props:{count:{type:Number,default:0}},getters:t=>({hi:()=>"hi",counterStore:()=>t.store.$("counter")}),computed:({state:t})=>({doubleCount:()=>t.value.count*2,isEven:()=>t.value.count%2===0}),actions:({state:t})=>({increment:e=>{t.emit({count:t.value.count+e})},reset:()=>{t.emit({count:0})}}),listen(t){},render:({props:t,state:e,computed:c,actions:n,getters:{counterStore:r}})=>u`<div> <div>props: ${t.count}</div> <p >Count: ${e.value.count}</p> <button onclick=${()=>n.increment(1)}>+1</button> <button onclick=${n.reset}>Reset</button> </div>`});var p={count:0},m=t=>({inc:()=>t.emit({count:t.value.count+1})});o({tagName:"parent-example-cmp-2",state:{example:0,...p},actions:({state:t})=>({...m(t),myinc:()=>{t.emit({example:t.value.example+1})}}),render(t){return u`${t.state.value.example}<example-cmp @button-click="${()=>console.log("button-click event")}"></example-cmp>`}});o({tagName:"example-cmp",render(t){return u`<button @click="${()=>t.el.emitEvent("button-click")}">Click</button>`}});var s=l(0),S=s.value+1;o({tagName:"example-cmp-2",render(t){return u`<button @click="${()=>t.el.emitEvent("button-click")}">Click</button>`}});var C=o({tagName:"signa-button",props:{variant:{type:String,default:"primary"}},render:({slots:t})=>(console.log(t.default),u`<button class="${a.button}"> ${t.default} </button>`)});export{C as Button};
