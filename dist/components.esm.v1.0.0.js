import{defineStore as a,defineComponent as o,html as u,createState as l}from"signa/core";var b=a({key:"counter",state:{count:0},computed:()=>({double:()=>!0})});o({tagName:"my-counter",state:{count:0},props:{val:{type:Number,default:20}},listen(e){},connected(e){},disconnected(e){},getters:e=>({counterStore:()=>e.store.$("counter"),hi:()=>"hi"}),computed:({state:e,props:t})=>(console.log(t),{doubleCount:()=>e.value.count+t.val,isEven:()=>e.value.count%2===0}),actions:({state:e})=>({increment:t=>{e.emit({count:e.value.count+t})},reset:()=>{e.emit({count:0})}}),render:e=>{let{state:t,computed:c,actions:n,getters:{counterStore:r}}=e;return u`<div> <p>Count test: ${t.value.count}</p> <p>Double: ${c.doubleCount}</p> <p>Is Even: ${c.isEven}</p> <button onclick=${()=>n.increment(1)}>+1</button> <button onclick=${n.reset}>Reset</button> </div>`}});o({tagName:"my-counter-2",state:{count:0},props:{count:{type:Number,default:0}},getters:e=>({hi:()=>"hi",counterStore:()=>e.store.$("counter")}),computed:({state:e})=>({doubleCount:()=>e.value.count*2,isEven:()=>e.value.count%2===0}),actions:({state:e})=>({increment:t=>{e.emit({count:e.value.count+t})},reset:()=>{e.emit({count:0})}}),listen(e){},render:({props:e,state:t,computed:c,actions:n,getters:{counterStore:r,hi:s}})=>u`<div> counter 2 component props value ${e.count} <p>Count: ${t.value.count}</p> <p>Double: ${c.doubleCount}</p> <p>Is Even: ${c.isEven}</p> <button onclick=${()=>n.increment(1)}>+1</button> <button onclick=${n.reset}>Reset</button> <my-component data-count="${t.value.count}"></my-component> </div>`});o({tagName:"my-component",state:{count:0},props:{count:{type:Number,default:0}},getters:e=>({hi:()=>"hi",counterStore:()=>e.store.$("counter")}),computed:({state:e})=>({doubleCount:()=>e.value.count*2,isEven:()=>e.value.count%2===0}),actions:({state:e})=>({increment:t=>{e.emit({count:e.value.count+t})},reset:()=>{e.emit({count:0})}}),listen(e){},render:({props:e,state:t,computed:c,actions:n,getters:{counterStore:r}})=>u`<div> <div>props: ${e.count}</div> <p >Count: ${t.value.count}</p> <button onclick=${()=>n.increment(1)}>+1</button> <button onclick=${n.reset}>Reset</button> </div>`});var i={count:0},m=e=>({inc:()=>e.emit({count:e.value.count+1})});o({tagName:"parent-example-cmp-2",state:{example:0,...i},actions:({state:e})=>({...m(e),myinc:()=>{e.emit({example:e.value.example+1})}}),render(e){return u`${e.state.value.example}<example-cmp @button-click="${()=>console.log("button-click event")}"></example-cmp>`}});o({tagName:"example-cmp",render(e){return u`<button @click="${()=>e.el.emitEvent("button-click")}">Click</button>`}});var p=l(0),$=p.value+1;o({tagName:"example-cmp-2",render(e){return u`<button @click="${()=>e.el.emitEvent("button-click")}">Click</button>`}});var g=o({tagName:"signa-button",props:{variant:{type:String,default:"primary"}},render:({slots:e})=>(console.log(e.default),u`<button class="signa-button"> ${e.default} </button>`)});export{g as Button};
